Partitioning:

0-1000 		dob 1% (values taken - 15, 500, 900)
1001-2000 	dob 2% (values taken - 1005, 1500, 1999)
2001-5000	dob 5% (values taken - 2002, 2500, 4999)

Boundary:
case 1. 0-1000 (tested values-> -1,0,1,999,1000,1001)
case 2. 1001-2000 (tested values -> 1002, 1999, 2000, 2001)
case 3. 2001-5000


Cause and effect:
case 1. open account -> 0 currency added -> 0% interest, add 100 currency -> 1% interest (final result 101)
add 499 -> 600 currency (606 after interest)
add 1000 currency > 1600 (1632 after interest) remove all currency -> 0 and 0% interest 

UX testing -> on mobile operating systems
1.how many taps are needed to send a message to any given contact????



Waterfall model:

Requirement gathering and analysis -> development -> testing -> release
Done in stages over long periods of time

Agile model:
small sprints which gather requirements, develop and test all given features


SaFe -> Scaled Agile
Used for very large teams.
Splitting the teams into smaller ones which take the agile model and work in parallel.



1st testcase
title: try to login an existing user 
1st step: Go to fxTrading app
	expected result ->user can reach page 
	actual result	-> succcess
2nd step: insert username and password (data required username "volo_test",  pwd "9AFLpaeiBYMvEMW")
	expected result -> fields are editable and user can input the strings
	actual result ->success
3rd step: click Login and check back end call
	expected result -> token is generated and the response is status code for authenticate is 200
	atual result -> pass
	

2nd testcase	 -> raise this defect
title: try login with any invalid password
1st step: Go to fxTrading app
	expected result ->user can reach page 
	actual result	-> succcess
2nd step: insert username and password (data required username "volo_test",  pwd any string)
	expected result -> fields are editable and user can input the strings
	actual result ->user can insert text into fields
3rd step:  click Login and check back end call
	expected result -> general error message "username or password is invalid" and response is 403 - forbidden or 401 -unauthorized
	actual result -> returns 500 internal server error and the message is and "OK" error


3rd testcase
title: try login with empty username and password
1st step: Go to fxTrading app
	expected result ->user can reach page 
	actual result	-> succcess
2nd step: click Login and check back end call
	expected result: alert username to insert values into fields
	actual result:pass -> back end call is not made and the messages are displayed to the user



cannot reproduce
Defect for the 2nd testcase:

Title:[Login page] Invalid login response status and wrong error message

Components: comp1, comp2

Label:labelx

Description:When inserting a wrong username or password the back end returns a 500 status with a wrong message, "OK" instead of "Wrong username and password".

Steps to reproduce:
	1.Go to fxTrading app
	2.Insert invalid username and password 
	3.Click Login and check back end call

Expected:
Invalid message credential should be displayed, "Wrong username and password" and received a 400 type status

Actual:
Returns a weird message "OK" and back end status code 500 internal server error.

attachments -> screenshot
request and response as har and/or json

repro rate:
10/10



3rd exercise:

Title:CurrencyExchange_inserting various characters into Amount field
1st step:go to fxTrading app	
	expected result-> app login page is reached
	actual result->
2nd step: insert username and password (data required username "volo_test",  pwd "9AFLpaeiBYMvEMW") and click login
	expected result -> fields are editable and user can input the strings, user can login
	actual result ->
3rd step: add new currency exchange modal
	expected results -> a new exchange currency is added and the user can choose primary and secondary currencies
	actual ->
4th step: add any primary and secondary currency and click OK
	expected results -> the user is shown the currency exchange cell
5th step: Select Tenor and insert various combinations into the Amount field and click buy/sell
	(data amount: 7868678,  tcfyvgbuhinjmok, -671523131, 34324.86, 10123e-1233123, 123123e123,#$%^&^6546, 2i)
	expceted result: the user should only be allowed to insert valid data (greater than 0, integer and positive)
	actual: failed
	
	
	
	User story 54
	User should be able to echange currencies
	
	AC1 user should be able to insert only integer values
	when the user wants to exchange currencies
	he can insert only integer values
	then he can buy or sell currencies.









	




	



























	
	
	
	
	
	
	
	
	
	






























